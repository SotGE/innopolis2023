#!/usr/bin/env python
# coding: utf-8

# # Домашнее задание № 2
# ## Тема: «Построение гипотез. A/B тестирование. Автотестирование гипотез»
# ### Формулировка задания:
# #### Подготовка к проведению A/B тестирования гипотезы
# #### Для выполнения задания выполнить следующие шаги:
# 1. Найти данные для анализа (таблица csv, xlsx в
# открытом доступе).
# 2. Изучить данные (тема, типы столбцов, есть ли
# зависимость между столбцами).
# 3. Составить список гипотез по данным. Предположения:
# - Зависимость столбцов по датам, времени и другим
# критериям;
# - Численный показатель или критерий оценки;
# - Насколько есть разница в данных по выбранному
# числовому критериям оценки.
# 4. Выбрать одну из гипотез и подтвердить её или
# опровергнуть.
# 5. (Дополнительно) В качестве критериев выбрать
# статистические критерии. Например, критерий
# Стьюдента и др.

# In[1]:


import statsmodels.formula.api as smf
import statsmodels.stats.multicomp as multi
import scipy
from scipy.stats import pearsonr
from scipy import stats
from seaborn import regplot
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import pandas as pd
import seaborn as sns


# In[2]:


# Монтируем диск Google Colab.
# from google.colab import drive
# drive.mount('/content/drive')


# In[3]:


# Считываем данные из диска Google Colab.
# df = pd.read_csv('/content/drive/MyDrive/Heart_Failure_Details.xlsx')

# Считываем данные из локального диска.
df = pd.read_csv('Heart_Failure_Details.csv')


# In[4]:


df.info()
df.head(7)


# In[5]:


df.describe().round(2)


# In[6]:


# Сумма нулевых значений по столбцам (проверяем датасет на наличие пропусков).
df.isnull().sum()


# In[7]:


df.info()
df.head()


# In[8]:


# Данный датасет содержит информацию о сердце и показатели сбоев пациентов.
# Исходя из данных датасета мы можем рассмотреть следующие вопросы:
#1. Существует ли положительная корреляция между параметром "Фракция выброса" и параметром "Тромбоциты"?
#2. Наблюдается ли зависимость между параметром "Тромбоциты" и параметром "Креатинфосфокиназа"?

# Потстроим матрицу корреляций.
matrix_corr = df.corr()

# Вывод корреляционной матрицы.
sns.heatmap(matrix_corr, annot=True, cmap='coolwarm')


# In[9]:


matrix_corr


# In[10]:


# Рассмотрим диаграмму измерения параметра "Возраст" пациентов.
fig = plt.subplots(figsize=(12, 7))
sns.countplot(x='age', data=df)
plt.show()


# In[11]:


# Рассмотрим диаграмму измерения параметра "Креатинфосфокиназа" пациентов.
# Креатинкиназа (креатинфосфокиназа) — это фермент, который участвует в энергетическом обмене, протекающем в скелетных мышцах, сердце, головном мозге и других тканях.
# Повышение уровня общей креатинфосфокиназы (КФК) и ее изоформ в плазме приводит к острому инфаркту миокарда, острому инсульту, дерматомиозиту/полимиозиту, гипотиреозу, паранеопластическому синдрому.
fig = plt.subplots(figsize=(12, 7))
sns.countplot(x='creatinine phosphokinase', data=df)
plt.show()


# In[12]:


# Рассмотрим диаграмму измерения параметра "Фракция выброса" пациентов.
# Фракция выброса - это объемная доля жидкости, выбрасываемой из камеры при каждом сокращении.
# Относится к сердечному предсердию, желудочку, желчному пузырю или венам ног, хотя, если не указано иное, обычно относится к левому желудочку сердца.
fig = plt.subplots(figsize=(12, 7))
sns.countplot(x='ejection fraction', data=df)
plt.show()


# In[13]:


# Рассмотрим диаграмму измерения параметра "Тромбоциты" пациентов.
# Тромбоциты (кровяные пластинки) — элементы крови, которые отвечают за свёртывание.
# Они помогают остановить кровотечение и защищают от массивной кровопотери.
fig = plt.subplots(figsize=(12, 7))
sns.countplot(x='platelets', data=df)
plt.show()


# ## Гипотеза № 1.
# ### Параметр "Фракция выброса" оказывает влияние на "Тромбоциты".

# In[14]:


# Рассмотрим показатели "Тромбоциты", "Креатинфосфокиназа" и "Возраст" относительно параметра "Фракция выброса".
fig, axes = plt.subplots(figsize=(20, 5), ncols=3)
sns.boxplot(ax=axes[0], x='ejection fraction', y='platelets', data=df)
sns.boxplot(ax=axes[1], x='ejection fraction', y='creatinine phosphokinase', data=df)
sns.boxplot(ax=axes[2], x='ejection fraction', y='age', data=df)
for i, ax in enumerate(fig.axes):
    axes[i].tick_params(axis='x', rotation=15)
plt.tight_layout()
plt.show()


# In[15]:


# Вычисляем коэффициент корреляции Пирсона между параметром "Фракция выброса" и параметром "Тромбоциты".
corr1 = df['ejection fraction'].corr(df['platelets'])

# Выводим результаты
print(f'Корреляция между параметром "Фракция выброса" и параметром "Тромбоциты": {corr1:.3f}')


# In[16]:


# Строим график зависимости между скоростью параметром "Фракция выброса" и параметром "Тромбоциты".
sns.regplot(x='ejection fraction', y='platelets', data=df)


# In[17]:


# Коэффициент корреляции Пирсона составляет 0.072, что позволяет сделать вывод об отсутствие линейной связи между (параметром "Фракция выброса" и параметром "Тромбоциты")
# Гипотеза не подтверждена


# ## Гипотеза № 2.
# ### Параметр "Тромбоциты" оказывает влияние на "Креатинфосфокиназа".

# In[18]:


# Рассмотрим показатели "Креатинфосфокиназа", "Фракция выброса" и "Возраст" относительно параметра "Тромбоциты".
fig, axes = plt.subplots(figsize=(20, 5), ncols=3)
sns.boxplot(ax=axes[0], x='platelets', y='creatinine phosphokinase', data=df)
sns.boxplot(ax=axes[1], x='platelets', y='ejection fraction', data=df)
sns.boxplot(ax=axes[2], x='platelets', y='age', data=df)
for i, ax in enumerate(fig.axes):
    axes[i].tick_params(axis='x', rotation=15)
plt.tight_layout()
plt.show()


# In[19]:


# Вычисляем коэффициент корреляции Пирсона между параметром "Тромбоциты" и параметром "Креатинфосфокиназа".
corr0 = df['platelets'].corr(df['creatinine phosphokinase']);

# Выводим результаты
print(f'Корреляция между параметром "Тромбоциты" и параметром "Креатинфосфокиназа": {corr1:.3f}')


# In[20]:


# Строим график зависимости между скоростью параметром "Тромбоциты" и параметром "Креатинфосфокиназа".
sns.regplot(x='platelets', y='creatinine phosphokinase', data=df)


# In[21]:


# Коэффициент корреляции Пирсона составляет 0.072, что позволяет сделать вывод об отсутствие линейной связи между (параметром "Тромбоциты" и параметром "Креатинфосфокиназа").
# Гипотеза не подтверждена

# Фильтруем данные по параметру "Тромбоциты".
df_filtered = df.loc[(df['platelets'] >= 100000) & (df['platelets'] <= 500000)]

# Строим график зависимости между параметром "Тромбоциты" и параметром "Креатинфосфокиназа" (с учём выборки).
sns.regplot(x='platelets', y='creatinine phosphokinase', data=df_filtered)


# In[22]:


# Вычисляем коэффициент корреляции Пирсона между  параметром "Тромбоциты" и параметром "Креатинфосфокиназа".
corr3 = df_filtered['platelets'].corr(df_filtered['creatinine phosphokinase']);

# Выводим результаты.
print(f'Корреляция между параметром "Тромбоциты" и параметром "Креатинфосфокиназа": {corr3:.3f}')


# In[23]:


df_filtered.boxplot(column=['creatinine phosphokinase'], by='platelets', figsize=(10,8))
plt.title('Зависимость между параметром "Креатинфосфокиназа" и параметром "Тромбоциты"')
plt.ylabel('Креатинфосфокиназа')
plt.xlabel('Тромбоциты')
plt.show()


# In[24]:


# Коэффициент корреляции Пирсона составляет 0.040, что позволяет сделать вывод об отсутствие линейной связи между (параметром "Тромбоциты" и параметром "Креатинфосфокиназа").
# Гипотеза не подтверждена (прослеживается незначительное увеличение линейной связи между параметром "Тромбоциты" и параметром "Креатинфосфокиназа", по мере увеличения параметра "Тромбоциты")

# Таким образом, ни одна из рассматриваемых гипотез не нашла в ходе анализа своего подтверждения.

# Гипотеза № 1: Параметр "Фракция выброса" оказывает влияние на "Тромбоциты" - НЕ ПОДТВЕРДИЛАСЬ.
# Для проверки данной гипотезы был использован метод Пирсона (его показатель составил 0.072) и графики корреляции, которые указывают на отсутствие линейной связи между рассматриваемыми переменными

# Гипотеза № 2: Параметр "Тромбоциты" оказывает влияние на "Креатинфосфокиназа" - НЕ ПОДТВЕРДИЛАСЬ.
# Для проверки данной гипотезы также был использован метод Пирсона (его показатель составил 0.072) и графики корреляции, которые указывают на отсутствие линейной связи между рассматриваемыми переменными.


# ## Выполним расчет Т-статистики.

# In[25]:


# отпределяем размер выборки.
n = df['platelets']
n = 816

# Рассчитаем гауссовские распределенные данные.
x = np.random.randn(n) + 2
y = np.random.randn(n)
var_x = x.var(ddof = 1)
var_y = y.var(ddof = 1)

# Рассчитаем стандартное отклонение.
SD = np.sqrt((var_x + var_y) / 2)
print('Стандартное отклонение = ', SD)

# Вычисляем T-статистику
tval =(x.mean() - y.mean()) /(SD * np.sqrt(2 / n))

# Сравним ее с критическим значением T (для этого мы вычислили степени свободы и сравним значение p).
dof = 2 * n - 2

pval = 1 - stats.t.cdf( tval, df = dof)
print("t = " + str(tval))
print("p = " + str(2 * pval))

tval2, pval2 = stats.ttest_ind(x, y)
print("t = " + str(tval2))
print("p = " + str(pval2))

