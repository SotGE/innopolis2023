# -*- coding: utf-8 -*-
"""lesson4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QQkhV9ZCU99rBSFpuprp-xgiK1ow5KEy
"""

import numpy as np

"""## Задача 1"""

# Объявляем матрицы

A = np.matrix([[1, 2, 1],
               [-2, 1, 1]])

B = np.matrix([[3, 1],
               [-1, 0],
               [2, 4]])

C = np.matrix([[-2, 2],
               [1, -1],
               [1, 2]])

# Копирование и преобразование матриц

# Добавить строку с нулями в конец
AA = np.insert(A, 2, 0, axis=0).copy()
print(AA)

# Добавить столбец с нулями в конец
BB = np.insert(B, 2, 0, axis=1).copy()
print(BB)

# Математические операции над матрицами

# Преобразованные копии матрицы (уравнивание размерности)
matrixResult1 = AA + 2 * BB
print(matrixResult1)

# Оригиналы матриц
matrixResult2 = B + 2 * C
print(matrixResult2)

# Решение первой математической операции с помощью транспонирование матрицы
AAA = np.transpose(A).copy()
print(AAA)

# Решение
matrixResult1 = AAA + 2 * B
print(matrixResult1)

"""## Задача 2"""

# Создание матрицы 8х8, заполненное нулями
zero = np.zeros((8, 8))
print(zero)

# Заполнение матрицы единицами в шахматном порядке
zero[0::2, 1::2] = 1
zero[1::2, 0::2] = 1
print(zero)

"""## Задача 3"""

# Формирование векторов

# Вектор с шагом 0.1
vec1 = np.arange(start=0, stop=1.5, step=0.1, dtype='float')
print(vec1)
print(vec1.shape) # Длинна многомерного массива
print(vec1.size) # Размерность

# Другой способ
gen_sequence1, step1 = np.linspace(0, 1.5, num=15, dtype='float', retstep=True)
print(gen_sequence1)
print(gen_sequence1.shape) # Длинна многомерного массива
print(gen_sequence1.size) # Размерность
print(step1) # Шаг

# Вектор с шагом 1
vec2 = np.arange(start=1, stop=7, step=1, dtype='int64')
print(vec2)
print(vec2.shape) # Длинна многомерного массива
print(vec2.size) # Размерность

# Другой способ
gen_sequence2, step2 = np.linspace(1, 6, num=6, dtype='int64', retstep=True)
print(gen_sequence2)
print(gen_sequence2.shape) # Длинна многомерного массива
print(gen_sequence2.size) # Размерность
print(step2) # Шаг

# Преобразование вектора в матрицу 5х3
vec1 = vec1.reshape(5, 3)
print(vec1)

# Преобразование вектора в матрицу 3х2
vec2 = vec2.reshape(3, 2)
print(vec2)

# Перемножение матриц
vec1.dot(vec2)
np.matmul(vec1, vec2)

# Приводим матрицы к одной форме (Broadcasting)
vec2copy = np.insert(vec2, 3, 0, axis=0).copy()
vec2copy = np.insert(vec2copy, 4, 0, axis=0)
vec2copy = np.insert(vec2copy, 2, 0, axis=1)
print(vec2copy)

# Перемножение матриц
vec3 = vec1 * vec2copy
print(vec3)

"""## Задача 4"""

# Формирование вектора из целых чисел
vec = np.arange(start=1, stop=37, step=2, dtype='int32')
print(vec)

# Bool обображение в матрице по условию
print(vec % 3 == 0)

# Элементы кратные 3
result = vec[vec % 3 == 0]
print(result)