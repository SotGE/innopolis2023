# -*- coding: utf-8 -*-
"""lesson6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mYPh5g93lyknGnYaRMmQPegFg3Idl4oZ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# from google.colab import drive
# drive.mount('/content/drive')

"""## Задача 1-2"""

# Data Frame (загрузка CSV файла с данными разделенными запятой)
# read_excel для XLS
df = pd.read_csv('Titanic-Dataset.csv', sep=',')

"""## Задача 3"""

# Просмотр наименования колонок
print(df.columns) # list с заголовками
print(" ".join(df.columns))

# Просмотр типов данных в датасете
print(df.info())

# Первые ячейки
df.head(10)

# Последние ячейки
df.tail(5)

"""## Задача 4"""

# Количество пустых ячеек
df.isnull().sum()

# Количество неопределенные значений (неправильно считанные)
df.isna().sum()

# Параметры числовых значений (фильтрация по числовым)
df.describe(include=['float', 'int'])

# Объем памяти DataFrame
memory = df.memory_usage(deep=True).sum()
print(f'Объем памяти, занимаемый DataFrame: {memory} байт')

# Кортеж из количества строк и столбцов
dtype = df.dtypes.value_counts()
print(f'Всего столбцов разных типов - {len(dtype)}')

# Кортеж из количества строк и столбцов
count = df.shape
print(f'Количество строк - {count[0]}, количество столбцов - {count[1]}')

"""## Задача 5-6"""

# Фильтр пустых значений
age = df.dropna(subset=['Age'])
cabin = df.dropna(subset=['Cabin'])
embarked = df.dropna(subset=['Embarked'])

# Заполнение средним значением
df['Age'] = df['Age'].fillna(round(age['Age'].mean()))

# Удаление столбца "Cabin"
df = df.drop(columns='Cabin', inplace=False)

# Удаление строк с пустыми занчениями
df = df.dropna()

# Количество пустых ячеек
df.isnull().sum()

# Количество неопределенные значений (неправильно считанные)
df.isna().sum()

"""## Задача 7"""

# Уникальные значения столбцов
nunique = df.nunique()
nunique

# Максимальные значения столбцов
maxi = df.max()
maxi

# Максимальные значения столбцов
mini = df.min()
mini

"""## Задача 8"""

# Разделение выборки на выжившие
isSurvived = df['Survived'] == 1
print(isSurvived)

# Разделение выборки на умершие
isDied = df['Survived'] == 0
print(isDied)

# Разделение выборки на выжившие
dataset_survived = df.loc[isSurvived]
dataset_survived = dataset_survived.dropna()
print(dataset_survived)

# Разделение выборки на умершие
dataset_died = df.loc[isDied]
dataset_died = dataset_died.dropna()
print(dataset_died)

"""## Визуализация данных"""

# Построение графиков

# Фигура 900 на 600 пикселей
fig = plt.figure(figsize=(9, 6))
# Распределение оси Х, шаг от 0 до 80 (10 точек)
min = 0
max = 80
counter = 10
x_points = np.linspace(min, max, counter)

# Гистограмма
def show_plot(data, x_points, color, label, xylabel, title):
    '''
    Функция для отображения гистограммы
    :param data - данные, массив столбцов
    :param x_points - массив точек оси Х
    :param color - массив цветов для графиков
    :param label - подписи легенда
    :param xylabel - подписи осей
    :param title - заголовок
    '''
    plt.hist(data, x_points, color=color, label=label)
    # расположение легенды (справа вверху)
    plt.legend(loc='upper right')
    plt.xlabel(xylabel[0])
    plt.ylabel(xylabel[1])
    plt.title(title)
    plt.show()

# Влияние класса круиза (Pclass) на выживание
data_to_plot = [dataset_died['Pclass'], dataset_survived['Pclass']]
colors = ['gray', 'blue']
labels = ['Выжившие', 'Погибшие']
xylabel = ['Класса круиза', 'Колличество человек']
title = 'Статистика выживших и умерших пассажиров по классу круиза'
show_plot(
    data=data_to_plot,
    x_points=x_points,
    color=colors,
    label=labels,
    xylabel=xylabel,
    title=title
)

# Влияние гендера (Sex) на выживание
data_to_plot = [dataset_died['Sex'], dataset_survived['Sex']]
colors = ['gray', 'blue']
labels = ['Выжившие', 'Погибшие']
xylabel = ['Гендер', 'Колличество человек']
title = 'Статистика выживших и умерших пассажиров по гендеру'
show_plot(
    data=data_to_plot,
    x_points=x_points,
    color=colors,
    label=labels,
    xylabel=xylabel,
    title=title
)

# Влияние возраста (Age) на выживание
data_to_plot = [dataset_died['Age'], dataset_survived['Age']]
colors = ['gray', 'blue']
labels = ['Выжившие', 'Погибшие']
xylabel = ['Возраст', 'Колличество человек']
title = 'Статистика выживших и умерших пассажиров по возрасту'
show_plot(
    data=data_to_plot,
    x_points=x_points,
    color=colors,
    label=labels,
    xylabel=xylabel,
    title=title
)

# Влияние билета (Fare) на выживание
data_to_plot = [dataset_died['Fare'], dataset_survived['Fare']]
colors = ['gray', 'blue']
labels = ['Выжившие', 'Погибшие']
xylabel = ['Билет', 'Колличество человек']
title = 'Статистика выживших и умерших пассажиров по билету'
show_plot(
    data=data_to_plot,
    x_points=x_points,
    color=colors,
    label=labels,
    xylabel=xylabel,
    title=title
)

# Разделение выборки по классам
class1 = df['Pclass'] == 1
class2 = df['Pclass'] == 2
class3 = df['Pclass'] == 3

dataset_class1 = df.loc[class1]
dataset_class2 = df.loc[class2]
dataset_class3 = df.loc[class3]

# Влияние возраста (Age) на класс
data_to_plot = [dataset_class1['Age'], dataset_class2['Age'], dataset_class3['Age']]
colors = ['gray', 'blue', 'green']
labels = ['Класс 1', 'Класс 2', 'Класс 3']
xylabel = ['Класс', 'Колличество человек']
title = 'Статистика классов по возрасту'
show_plot(
    data=data_to_plot,
    x_points=x_points,
    color=colors,
    label=labels,
    xylabel=xylabel,
    title=title
)

# Информативность с помощью боксплот (максимальное, минимальное, квантили)
dataset_class1.boxplot()

dataset_class2.boxplot()

dataset_class3.boxplot()

dataset_class1[['Age', 'Fare']].boxplot()

dataset_class2[['Age', 'Fare']].boxplot()

dataset_class3[['Age', 'Fare']].boxplot()

# Зависимость по выжившим, возраста и стоимости билета
df.groupby('Survived')[['Age', 'Ticket']].plot()