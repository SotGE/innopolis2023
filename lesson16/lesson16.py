# -*- coding: utf-8 -*-
"""lesson16.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Rkq23W6GJ9BEWdd78WRhQm4UAcZgeCR9
"""

!pip install pymorphy3
!pip install texttable

import re
import time
import requests

import pandas as pd
import numpy as np
from bs4 import BeautifulSoup

import pymorphy3 # работа с русским языком, pymorphy3

import texttable as tt

# рассмотрим данные прогноза погоды в Челябинске (Советский район города)
url = 'https://yandex.ru/pogoda/month/january?lat={latitude}&lon={lontitude}'
url = url.format(latitude=55.159897, lontitude=61.402554)
page = requests.get(url)
bs = BeautifulSoup(page.text, 'html.parser')
print(bs)

# информация о погоде за Январь 2023

morph = pymorphy3.MorphAnalyzer(lang='ru')

january = []
temp_january = bs.find('table', {'class': 'climate-calendar'}).find_all('td', {'class': 'climate-calendar__cell'})
for i, val in enumerate(temp_january):
  temp = []
  if val.find('div', {'class': 'climate-calendar-day_colorless_yes'}):
    continue
  temp.append(int(val.find('div', {'class': 'climate-calendar-day__detailed-container-center'}).find_next('h6').text.split(',', 1)[0].split(' ', 1)[0]))
  temp.append(str(morph.parse(val.find('div', {'class': 'climate-calendar-day__detailed-container-center'}).find_next('h6').text.split(',', 1)[0].split(' ', 1)[1])[0].normal_form))
  temp.append(2023)
  temp.append(str(val.find('div', {'class': 'climate-calendar-day__detailed-container-center'}).find_next('h6').text.split(',', 1)[1]))
  temp.append(int(val.find('div', {'class': 'temp climate-calendar-day__detailed-basic-temp-day'}).find('span').text.replace('−', '-')))
  temp.append(int(val.find('div', {'class': 'temp climate-calendar-day__detailed-basic-temp-night'}).find('span').text.replace('−', '-')))
  temp.append(int(val.find_all('td', {'class': 'climate-calendar-day__detailed-data-table-cell climate-calendar-day__detailed-data-table-cell_value_yes'})[0].text.split(' ', 1)[0]))
  temp.append(int(val.find_all('td', {'class': 'climate-calendar-day__detailed-data-table-cell climate-calendar-day__detailed-data-table-cell_value_yes'})[1].text.split('%', 1)[0]) / 100)
  temp.append(float(val.find_all('td', {'class': 'climate-calendar-day__detailed-data-table-cell climate-calendar-day__detailed-data-table-cell_value_yes'})[2].find('div').text))
  temp.append(str(val.find_all('td', {'class': 'climate-calendar-day__detailed-data-table-cell climate-calendar-day__detailed-data-table-cell_value_yes'})[2].find('abbr').text))
  january.append(temp)
january

# Датафрейм из массива
df = pd.DataFrame(january, columns=['День', 'Месяц', 'Год', 'День недели', 'Температура днем', 'Температура ночью', 'Давление (мм рт. ст.)', 'Влажность (%)', 'Скорость ветра', 'Направление ветра'])
df

# cоздаем объект Texttable
tab = tt.Texttable()

# устанавливаем стили таблицы
tab.set_cols_align(['c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c'])
tab.header(['День', 'Месяц', 'Год', 'День недели', 'Температура днем', 'Температура ночью', 'Давление (мм рт. ст.)', 'Влажность (%)', 'Скорость ветра', 'Направление ветра'])

# преобразуем DataFrame в список списков (двумерный список)
data_list = df.values.tolist()

# добавляем данные в таблицу
for row in data_list:
  tab.add_row(row)

# получаем отформатированную таблицу в виде строки
table_string = tab.draw()

# выводим таблицу на экран
print(table_string)